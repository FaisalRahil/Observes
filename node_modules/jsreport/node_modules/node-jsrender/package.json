{
  "author": {
    "name": "Rob Evans",
    "url": "Irrelon Software Limited"
  },
  "name": "node-jsrender",
  "description": "An actively maintained wrapper for the jsrender project by @borismoore. Uses latest source from the jsrender project and extends functionality for easy use in Node.js and express.",
  "version": "1.0.6",
  "main": "./index",
  "engines": {
    "node": "*"
  },
  "readme": "# Node-JSRender\nAn actively maintained wrapper for the jsrender project by @borismoore (https://github.com/BorisMoore/jsrender). Uses latest source from the jsrender project and extends functionality for easy use in Node.js.\n\n## Install\n\tnpm install node-jsrender\n\n## Using With Express\nIf you use express and wish to use jsRender as your express template engine you can now do so.\nYou can specify the engine to use via:\n\n\tvar express = require('express');\n\tvar app = express();\n\tvar nodeJsRender = require('node-jsrender');\n\t\n\t// Register jsRender with express to handle html files\n\tnodeJsRender.express('html', app);\n\t\n\t// Set express template engine to jsrender\n\tapp.set('view engine', 'html');\n\n## Usage Without Express (Manually Rendering)\n\n### Loading a Template From a String\n```javascript\n// Require the node module\nvar jsrender = require('node-jsrender');\n\n// Load a template from string\njsrender.loadString('#myTemplate', '{{:data}}');\n\n// Render the template with data\njsrender.render['#myTemplate']({data: 'hello'});\n\n// Output is: \"hello\"\n```\n\n### Loading a Template From a File (Synchronously)\n```javascript\n// Require the node module\nvar jsrender = require('node-jsrender');\n\n// Load a template from ./templates/myTemplate.html\n//     Contents of ./templates/myTemplate.html is: \"{{:data}}\"\njsrender.loadFileSync('#myTemplate', './templates/myTemplate.html');\n\n// Render the template with data\njsrender.render['#myTemplate']({data: 'hello'});\n\n// Output is: \"hello\"\n```\n\n### Loading a Template From a File (Asynchronously)\n```javascript\n// Require the node module\nvar jsrender = require('node-jsrender');\n\n// Load a template from ./templates/myTemplate.html\n//     Contents of ./templates/myTemplate.html is: \"{{:data}}\"\njsrender.loadFile('#myTemplate', './templates/myTemplate.html', function (err, template) {\n\tif (!err) {\n\t\t// Template was loaded\n\t\t// Render the template with data\n\t\tjsrender.render['#myTemplate']({data: 'hello'});\n\t\t\n\t\t// Output is: \"hello\"\n\t} else {\n\t\tthrow(err);\n\t}\n});\n```\n\n### Nested Templates\n\nIn jsrender, you can have templates that reference other templates, nested templates. But to work, you must register the nested templates before rending the parent template.\n\n```javascript\n// Require the node module\nvar jsrender = require('node-jsrender');\n\n// Load parent template from string\n//     {{for items tmpl=\"#listItem\" //}} indicates a nested template\njsrender.loadString('#list', '<ul>Grocery List</ul>{{for items tmpl=\"#listItem\" /}}</ul>');\n\n// Load child template from string\n//      Nested templates must be registered with a name matching the parent template before rendering the parent template\njsrender.loadString('#listItem', '<li>{{:name}}</li>');\n\n// Render the parent template with data\njsrender.render['#list']({items: [{name:'Carrots'}, {name: \"Banana\"}]});\n\n// Output is: \"<ul>Grocery List</ul><li>Carrots</li><li>Banana</li></ul>\"\n```\n",
  "readmeFilename": "readme.md",
  "_id": "node-jsrender@1.0.6",
  "_from": "node-jsrender@1.0.6"
}
