{
  "name": "script-manager",
  "version": "0.3.1",
  "author": {
    "name": "Jan Blaha",
    "email": "jan.blaha@hotmail.com"
  },
  "contributors": [],
  "description": "Manager for running foreign and potentionally dangerous scripts in the cluster",
  "keywords": [
    "custom",
    "script",
    "manager"
  ],
  "homepage": "https://github.com/pofider/node-script-manager",
  "repository": {
    "type": "git",
    "url": "git@github.com:pofider/node-script-manager.git"
  },
  "dependencies": {
    "net-cluster": "0.0.2",
    "portscanner": "1.0.0",
    "request": "2.53.0",
    "string": "3.0.0",
    "underscore": "1.8.2",
    "uuid": "2.0.1"
  },
  "devDependencies": {
    "mocha": "2.1.0",
    "should": "5.0.1"
  },
  "scripts": {
    "test": "mocha test/test.js"
  },
  "main": "index.js",
  "license": "MIT",
  "readme": "#script-manager\r\n[![NPM Version](http://img.shields.io/npm/v/script-manager.svg?style=flat-square)](https://npmjs.com/package/script-manager)\r\n[![License](http://img.shields.io/npm/l/script-manager.svg?style=flat-square)](http://opensource.org/licenses/MIT)\r\n[![Build Status](https://travis-ci.org/pofider/node-script-manager.png?branch=master)](https://travis-ci.org/pofider/node-script-manager)\r\n\r\n**node.js manager for running foreign and potentially dangerous scripts in the cluster**\r\n\r\n\r\n##Basics\r\n\r\nYou can use node.js vm module for running a custom javascript code, but when the code is bad it can quickly get your node.js process into an endless loop. For this reason it is better to run users's custom code in a separate node process which you can recycle when the script reaches timeout. This can be achieved using node child_process module, but a simple implementation has limitations in performance and scale because running each script in a new node child process can quickly spawn whole system with node processes. This package solves the problem of running user's custom javascript code in a load balanced cluster of node processes which are reused over the requests and recycled when needed.\r\n\r\n```js\r\nvar scriptManager = require(\"script-manager\")({ numberOfWorkers: 2 });\r\n\r\nscriptManager.ensureStarted(function(err) {\r\n\r\n\t/*send user's script including some other specific options into\r\n\twrapper specified by execModulePath*/\r\n\tscriptManager.execute({\t\r\n\t\tscript: \"return 'Jan';\"\r\n\t}, { \r\n\t\texecModulePath: path.join(__dirname, \"script.js\"),\r\n\t    timeout: 10\r\n\t}, function(err, res) {\r\n\t\tconsole.log(res);\r\n\t});\r\n\t\r\n});\r\n```\r\n\r\n```js\r\n/*script.js\r\nwrapper usually does some fancy thing and then runs the custom script using node.js vm module*/\r\nmodule.exports = function(inputs, callback, done) {\r\n\tvar result = require('vm').runInNewContext(inputs.script, {\r\n\t\trequire: function() { throw new Error(\"Not supported\"); }\r\n\t});\r\n\tdone(result);\r\n});\r\n```\r\n\r\n##Callbacks\r\nThe executing script can also callback to the caller process. The callback is provided using `node.js` cross process messages so it has some limitations, but should work when transferring just common objects in parameters. \r\n\r\nTo provide caller callback you can add the `callback` property to the `execute` options:\r\n\r\n```js\r\nscriptManager.execute({\t\r\n\t\tscript: \"return 'Jan';\"\r\n\t}, { \r\n\t\texecModulePath: path.join(__dirname, \"script.js\"),\r\n\t    callback: function(argA, argB, cb) {\r\n\t\t    cb(null, \"foo\");\r\n\t    }\r\n\t}, function(err, res) {\r\n\t\tconsole.log(res);\r\n\t});\r\n```\r\n\r\nThen in the wrapper you can for example offer a function `funcA` to the users script which uses callback parameter to contact the original caller.\r\n\r\n```js\r\nmodule.exports = function(inputs, callback, done) {\r\n\tvar result = require('vm').runInNewContext(inputs.script, {\r\n\t\trequire: function() { throw new Error(\"Not supported\"); },\r\n\t\tfuncA: function(argA, cb) {\r\n\t\t\tcallback(argA, cb);\r\n\t\t}\r\n\t});\r\n\tdone(result);\r\n});\r\n```\r\n\r\n##Options\r\n\r\n```js\r\nvar scriptManager = require(\"script-manager\")({\r\n \t\t/* number of worker node.js processes */\r\n\t\tnumberOfWorkers: 2,\r\n\t\t/* set a custom hostname on which script execution server is started, useful is cloud environments where you need to set specific IP */\r\n\t\thost: '127.0.0.1',\r\n\t\t/* set a specific port range for script execution server */\r\n\t\tportLeftBoundary: 1000,\r\n\t\tportRightBoundary: 2000\r\n\t});\r\n```\r\n\r\n\r\n##License\r\nSee [license](https://github.com/pofider/node-script-manager/blob/master/LICENSE)\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pofider/node-script-manager/issues"
  },
  "_id": "script-manager@0.3.1",
  "_from": "script-manager@0.3.1"
}
